---
import type { HTMLAttributes } from 'astro/types';

type Props = HTMLAttributes<"div">;

const { ...props } = Astro.props as Props;
---
<div {...props} id="lavaLamp">
</div>

<style is:global lang="scss">
  #lavaLamp {
    position: relative;
    background: rgba(5,42,162);
  }
  canvas{
    height: 100%;
    width: 100%;
    opacity: 0;
    transition: all 2s ease;
    &.active{
      opacity: 1;
    }
  }
</style>
<script>
  import {GlowParticle} from './scripts/glowparticle';

  interface Color {
    r: number;
    g: number;
    b: number;
  }
  
  class LavaLamp {

    private lavaLamp: HTMLElement | null;
    private colors: Array<Color>;
    private canvas: HTMLCanvasElement;
    private ctx: CanvasRenderingContext2D | null;
    private pixelRatio: number;
    private totalParticles: number;
    private particles: GlowParticle[];
    private maxRadius: number;
    private minRadius: number;
    private stageWidth: number;
    private stageHeight: number;  

    constructor(target: string, colors: Array<Color>){

      this.colors = colors;
      this.lavaLamp = document.querySelector(target);
      this.canvas = document.createElement('canvas');
      this.ctx = this.canvas.getContext('2d');
      this.pixelRatio = (window.devicePixelRatio > 1) ? 2 : 1;
      this.totalParticles = 14;
      this.particles = [];
      this.maxRadius = 900;
      this.minRadius = 400;
      this.stageWidth = document.body.clientWidth;
      this.stageHeight = document.body.clientHeight;

      if(this.lavaLamp) this.lavaLamp.appendChild(this.canvas);

      window.addEventListener('resize', this.resize.bind(this), false);
      this.resize();
      
      this.canvas.classList.add('active');

      window.requestAnimationFrame(this.animate.bind(this));
    }

    resize(){
      this.stageWidth = document.body.clientWidth;
      this.stageHeight = document.body.clientHeight;

      this.canvas.width = this.stageWidth * this.pixelRatio;
      this.canvas.height = this.stageHeight * this.pixelRatio;

      if(this.ctx) this.ctx.scale(this.pixelRatio, this.pixelRatio);
      if(this.ctx) this.ctx.globalCompositeOperation = 'saturation';

      this.createParticles();
    }

    createParticles(){
      let curColor = 0;
      this.particles = []; 

      for(let i = 0; i < this.totalParticles; i++) {
        const item = new GlowParticle(
          Math.random() * this.stageWidth,
          Math.random() * this.stageHeight,
          Math.random() * 
          (this.maxRadius - this.minRadius) + this.minRadius,
          this.colors[curColor] 
        );
        
        if(++curColor >= this.colors.length) {
          curColor = 0;
        }

        this.particles[i] = item;
      }
    }

    animate(){
      window.requestAnimationFrame(this.animate.bind(this));
      if(this.ctx) this.ctx.clearRect(0,0, this.stageWidth, this.stageHeight);

      for( let i = 0; i < this.totalParticles; i++){
        const item = this.particles[i];
        item.animate(this.ctx, this.stageWidth, this.stageHeight);
      }
    }
    
  }

  const colorsVariantA: Array<Color> = [
    { r: 5, g: 42, b: 162 }, // International Klein Blue
    { r: 253, g: 2, b: 206 }, // Hot Magenta
    { r: 253, g: 126, b: 20 }, // Heat Wave
    { r: 251, g: 18, b: 46 }, // Imperial Red
  ];

  const colorsVariantB: Array<Color> = [
      { r: 45, g: 74,b: 277 }, // blue
      { r: 250, g: 255,b: 89 }, // yellow
      { r: 255, g: 104,b: 248 }, // pupple
      { r: 44, g: 209,b: 252 }, // skyblue
      { r: 53, g: 233, b: 84 }, // green
  ];

  window.onload = () =>{
    new LavaLamp('#lavaLamp', colorsVariantA);
  }
</script>