---
import type { HTMLAttributes } from 'astro/types';
import imgNoise from './svg/noise.svg';

export enum LavaLampColor {
  VariantA = 'variantA',
  VariantB = 'variantB',  
}

interface CommonProps {
  color?: LavaLampColor;
}

type Props = HTMLAttributes<"div"> & CommonProps;

const { color, ...props } = Astro.props as Props;
---
<div {...props} id="lavaLamp" 
  data-color-variant-a={color === LavaLampColor.VariantA && "true"}
  data-color-variant-b={color === LavaLampColor.VariantB && "true"}
  style={{ 
          backgroundImage: `url(${imgNoise.src})`,
          backgroundSize: '300px',
          backgroundRepeat: 'repeat',
          filter: 'contrast(400%)' 
        }}>
        <!-- <div class="circle"
        ></div> -->
        <!-- backgroundImage: `url(${imgNoise.src})`,
        backgroundSize: '300px',
        backgroundRepeat: 'repeat',
        filter: 'contrast(400%)'  -->
</div>


<style lang="scss">
  @use "../../../scss/config" as *;
  // https://docs.astro.build/en/reference/directives-reference/
  #lavaLamp {
    position: relative;
    // background: rgba(5,42,162);
    // .circle{
    //   $red-color: rgba(251,18,46, 1);
    //   @include pseudo();
    //   @include center();
    //   @include square(300);
    //   // background: $red-color;
    //   background: radial-gradient(circle, rgba($red-color, 1) 0%, rgba($red-color, 0) 70%);
    //   border-radius: rem(99999999);
      
    // }
  }
  canvas{
    height: 100%;
    width: 100%;
    opacity: 0;
    transition: all 2s ease;
    &.active{
      opacity: 1;
    }
  }
</style>
<script>
  import { LavaLampColor } from './lava-lamp.astro';
  import {GlowParticle} from './scripts/glowparticle';

  interface Color {
    r: number;
    g: number;
    b: number;
  }
  
  class LavaLamp {

    private lavaLamp: HTMLElement | null;
    private colors: Array<Color>;
    private canvas: HTMLCanvasElement;
    private ctx: CanvasRenderingContext2D | null;
    private pixelRatio: number;
    private totalParticles: number;
    private particles: GlowParticle[];
    private maxRadius: number;
    private minRadius: number;
    private stageWidth: number;
    private stageHeight: number;  

    constructor(target: string, colors: Array<Color>){

      this.colors = colors;
      this.lavaLamp = document.querySelector(target);
      this.canvas = document.createElement('canvas');
      this.ctx = this.canvas.getContext('2d');
      this.pixelRatio = (window.devicePixelRatio > 1) ? 2 : 1;
      this.totalParticles = 4;
      // this.totalParticles = 14;
      this.particles = [];
      this.maxRadius = 900;
      this.minRadius = 400;
      this.stageWidth = this.lavaLamp ? this.lavaLamp.clientWidth : document.body.clientWidth;
      this.stageHeight = this.lavaLamp ? this.lavaLamp.clientHeight : document.body.clientHeight;

      if(this.lavaLamp) this.lavaLamp.appendChild(this.canvas);

      window.addEventListener('resize', this.resize.bind(this), false);
      this.resize();
      
      this.canvas.classList.add('active');
      window.requestAnimationFrame(this.animate.bind(this));
    }

    resize(){
      this.stageWidth = this.lavaLamp ? this.lavaLamp.clientWidth : document.body.clientWidth;
      this.stageHeight = this.lavaLamp ? this.lavaLamp.clientHeight : document.body.clientHeight;

      this.canvas.width = this.stageWidth * this.pixelRatio;
      this.canvas.height = this.stageHeight * this.pixelRatio;

      if(this.ctx) this.ctx.scale(this.pixelRatio, this.pixelRatio);

      if(this.ctx) this.ctx.globalCompositeOperation = "xor";
      // if(this.ctx) this.ctx.globalCompositeOperation = 'hard-light';
      // if(this.ctx) this.ctx.globalCompositeOperation = "darken";
      // if(this.ctx) this.ctx.globalCompositeOperation = "destination-over";
      


      // // "destination-over"
      // // "xor"
      // // "exclusion"
      // // "hue"
      // "saturation"
      // "color"
      // "luminosity"

      this.createParticles();
    }

    createParticles(){
      let curColor = 0;
      this.particles = []; 

      for(let i = 0; i < this.totalParticles; i++) {
        let item: GlowParticle;
        
        if(i === 0){
          item = new GlowParticle(
            this.stageWidth / 2,
            this.stageHeight / 2,
            Math.random() * 
            (this.maxRadius - this.minRadius) + this.minRadius,
            this.colors,
            true
          );
        }else{
          item = new GlowParticle(
            Math.random() * this.stageWidth,
            Math.random() * this.stageHeight,
            Math.random() * 
            (this.maxRadius - this.minRadius) + this.minRadius,
            this.colors,
            false
          );
        }
        
        if(++curColor >= this.colors.length) {
          curColor = 0;
        }

        this.particles[i] = item;
      }
    }

    animate(){
      window.requestAnimationFrame(this.animate.bind(this));
      if(this.ctx) this.ctx.clearRect(0,0, this.stageWidth, this.stageHeight);

      for( let i = 0; i < this.totalParticles; i++){
        const item = this.particles[i];
        item.animate(this.ctx, this.stageWidth, this.stageHeight);
      }
    }
    
  }

  const colorsVariantA: Array<Color> = [
    { r: 45, g: 74,b: 277 }, // blue
    { r: 250, g: 255,b: 89 }, // yellow
    { r: 255, g: 104,b: 248 }, // pupple
    { r: 44, g: 209,b: 252 }, // skyblue
    { r: 53, g: 233, b: 84 }, // green
  ];
    
  const colorsVariantB: Array<Color> = [
    // { r: 250, g: 255,b: 89 }, // yellow
    // { r: 255, g: 104,b: 248 }, // pupple
    { r: 253, g: 2, b: 206 }, // Hot Magenta
    { r: 253, g: 126, b: 20 }, // Heat Wave
    { r: 251, g: 18, b: 46 }, // Imperial Red
  ];

  window.onload = () =>{
    // Workarround "define:vars" for typescript script into astro.
    // https://stackoverflow.com/questions/78526273/how-to-access-astro-props-inside-a-script-tag#:~:text=To%20be%20able%20to%20use,Directives%20Reference%20on%20Astro%20documentation.&text=The%20caveat%20is%20that%20when,inlined%20directly%20into%20the%20HTML.
    const dataDiv: HTMLElement | null = document.querySelector('#lavaLamp'); 
    let selectedColors: Array<Color> = colorsVariantA;
  
    const colorA = Boolean(dataDiv?.dataset.colorVariantA);
    const colorB = Boolean(dataDiv?.dataset.colorVariantB);
    
    if(colorA) selectedColors = colorsVariantA;
    if(colorB) selectedColors = colorsVariantB;

    new LavaLamp('#lavaLamp', selectedColors);
  }
</script>