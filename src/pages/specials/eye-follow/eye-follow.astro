---
import Eye from "./svg/eye.svg?raw";
---

<div class="eye-follow wrapper-1">
  <div class="eye-follow__inner wrapper-2">
    <div class="eye-follow__eye">
      <div class="eye-follow__pupil"></div>
    </div>
  </div>
  <div class="eye-follow__outer"><Fragment set:html={Eye} /></div>
</div>

<style lang="scss">
  @use "../../../scss/config" as *;

  $eye-follow--color: var(--eye-follow--color, #{$black});


  .eye-follow{
    aspect-ratio: 195 / 111;
    width: rem(157);
    position: relative;
    color: $eye-follow--color;

    // Layout
    &__inner{
      aspect-ratio: 157 / 65;
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate3d(-50%, -48%, 0);
      width: 80%;
      height: auto;
      mask-image: url("./svg/eye-mask.svg");
      mask-size: 100% 100%;
      mask-repeat: no-repeat;
      mask-position: center;
    }
    &__outer{
      position: relative;
    }

    // Elements
    &__eye{
      @include center();
      width: rem(100);
      height: rem(100);
      background: transparent;
      border: 1.5px solid currentColor;
      border-radius: 50%;
      overflow: hidden;
    }
    
    &__pupil{
      position: absolute;
      @include square(50);
      border: 1.5px solid currentColor;
      transform: translate3d(0px, -1px, 0px);
      border-radius: rem(9999);
      
      &:after{
        @include pseudo();
        @include center();
        @include square(30);
        background: currentColor;
        border-radius: $radius-full;
      }
    }
  }
  
</style>

<script>
  // import anime from 'animejs/lib/anime.es.js';
  class EyeFollow {
    eye: HTMLElement;
    pupil: HTMLElement | null;
    eyeRect: DOMRect;

    constructor(eye: HTMLElement) {
      this.eye = eye;
      this.pupil = this.eye.querySelector('.eye-follow__pupil');
      this.eyeRect = this.eye.getBoundingClientRect();
      document.addEventListener('mousemove', this.movePupil.bind(this));
    }


    clamp(value: number, min:number, max:number) {
      return Math.max(min, Math.min(max, value));
    }

    movePupil(e: MouseEvent){ 
      const eyeRect = this.eyeRect;
      const windowWidth = document.documentElement.clientWidth;
      const windowHeight = document.documentElement.clientHeight;

      const leftOffest = ( windowWidth / 2) - (eyeRect.left + eyeRect.width / 2);
      const topOffest = ( windowHeight / 2) - (eyeRect.top + eyeRect.height / 2);

      const xPercent = ((e.clientX + leftOffest) / windowWidth) ;
      const yPercent = ((e.clientY + topOffest) / windowHeight);

      const maxOffset = eyeRect.width / 2; 

      let newLeft = xPercent * maxOffset;
      newLeft = this.clamp(newLeft, 0, maxOffset);

      let newTop = yPercent * maxOffset;
      newTop = this.clamp(newTop, 0, maxOffset);

      if(this.pupil){
        this.pupil.style.left = newLeft + 'px';
        this.pupil.style.top = newTop + 'px';
      }

      // // Anime if there is a debounce
      // anime({
      //   targets: this.pupil,
      //   left: newLeft, // pupil.style.left = newLeft + 'px';
      //   top: newTop, // pupil.style.top = newTop + 'px';
      //   duration: 200,
      //   easing: 'easeOutCirc'
      // });
    }
  }

  const eyes = document.querySelectorAll('.eye-follow__eye');
  eyes.forEach(eye => new EyeFollow(eye as HTMLElement));
</script>

