---
import type { HTMLAttributes } from 'astro/types';

type Props = HTMLAttributes<"div">;

const { ...props } = Astro.props as Props;
---
<div {...props} id="lavaLamp">
</div>

<style is:global>
  #lavaLamp {
    position: relative;
    background: rgba(5,42,162);
  }
  canvas{
    height: 100%;
    width: 100%;
    background: rgba(5,42,162);
  }

  canvas#noise{
    position: absolute;
    left: 0; top: 0;
    width: 100%; height: 100%;
    opacity: 0.07;
  }
</style>
<script>
  import './scripts/noise';
  import {GlowParticle} from './scripts/glowparticle';

  const app = document.querySelector('#lavaLamp');
  console.log('app:', app)

  const COLORS = [
    { r: 5, g: 42, b: 162 }, // International Klein Blue
    // { r: 21, g: 57, b: 117 }, // International Klein Blue #2
    // { r: 30, g: 22, b: 71 }, // International Klein Blue #3
    
    // { r: 167, g: 39, b: 173 }, // Mallow
    { r: 253, g: 2, b: 206 }, // Hot Magenta
    { r: 253, g: 126, b: 20 }, // Heat Wave
    // { r: 247, g: 251, b: 14 }, // Lemon glacier
    { r: 251, g: 18, b: 46 }, // Imperial Red
  ];

  // const COLORS = [
  //   { r: 45, g: 74,b: 277 }, // blue
  //   { r: 250, g: 255,b: 89 }, // yellow
  //   { r: 255, g: 104,b: 248 }, // pupple
  //   { r: 44, g: 209,b: 252 }, // skyblue
  //   { r: 53, g: 233, b: 84 }, // green
  // ];

  class AppÂ {
    constructor(){
      this.canvas = document.createElement('canvas');
      app.appendChild(this.canvas);
      this.ctx = this.canvas.getContext('2d');

      this.pixelRatio = (window.devicePixelRatio > 1) ? 2 : 1;

      this.totalParticles = 14;
      this.particles = [];
      this.maxRadius = 900;
      this.minRadius = 400;

      window.addEventListener('resize', this.resize.bind(this), false);
      this.resize();

      window.requestAnimationFrame(this.animate.bind(this));
    }

    resize(){
      this.stageWidth = document.body.clientWidth;
      this.stageHeight = document.body.clientHeight;

      this.canvas.width = this.stageWidth * this.pixelRatio;
      this.canvas.height = this.stageHeight * this.pixelRatio;
      this.ctx.scale(this.pixelRatio, this.pixelRatio);

      this.ctx.globalCompositeOperation = 'saturation';

      this.createParticles();
    }

    createParticles(){
      let curColor = 0;
      this.particles = []; 

      for(let i = 0; i < this.totalParticles; i++) {
        const item = new GlowParticle(
          Math.random() * this.stageWidth,
          Math.random() * this.stageHeight,
          Math.random() * 
          (this.maxRadius - this.minRadius) + this.minRadius,
          COLORS[curColor] 
        );
        
        if(++curColor >= COLORS.length) {
          curColor = 0;
        }

        this.particles[i] = item;
      }
    }
    animate(){
      window.requestAnimationFrame(this.animate.bind(this));
      this.ctx.clearRect(0,0, this.stageWidth, this.stageHeight);

      for( let i = 0; i < this.totalParticles; i++){
        const item = this.particles[i];
        item.animate(this.ctx, this.stageWidth, this.stageHeight);
      }
    }
  }

  window.onload = () =>{
    new App();
  }
</script>